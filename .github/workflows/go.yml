name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Build
      run: go build -v ./...

  push:
    name: Push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Automatic Tagging of Releases
      id: increment-git-tag
      run: |
        bash ./build/git_update.sh -v patch
    - name: Update .env file
      run: |
        echo "DB_HOST=${{ secrets.AWS_ACCESS_KEY_ID }}
        DB_USER=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        DB_PASSWORD=${{ secrets.AWS_REGION }}
        DB_NAME=${{ secrets.AWS_ACCESS_KEY_ID }}" > .env

    - name: Build, Tag, and Push the Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: iguana_api
        IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      run: |
        # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
        # docker tag iguana_api_database:latest $ECR_REGISTRY/iguana_api_database:$IMAGE_TAG
        # echo "Pushing to $ECR_REGISTRY/iguana_api_database:$IMAGE_TAG"
        # docker push $ECR_REGISTRY/iguana_api_database:$IMAGE_TAG

        docker-compose build
        docker tag iguana_api_api:latest $ECR_REGISTRY/iguana_api_api:$IMAGE_TAG
        echo "Pushing to $ECR_REGISTRY/iguana_api_api:$IMAGE_TAG"
        docker push $ECR_REGISTRY/iguana_api_api:$IMAGE_TAG

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ secrets.ECS_CONTAINER_DEFINITION }} \
        --query taskDefinition > task-definition.json    
    - name: Fill in the new app image ID in the Amazon ECS task definition
      id: iguna-august
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ secrets.ECS_APP_CONTAINER_NAME }}
        image: $ECR_REGISTRY/iguana_api_api:$IMAGE_TAG

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: task-definition.json
        cluster: august
        wait-for-service-stability: true












        
       
  
        # echo "::set-output name=appimage::$ECR_REGISTRY/larvel-app:$IMAGE_TAG"
        # echo "::set-output name=webimage::$ECR_REGISTRY/larvel-nginx:$IMAGE_TAG"
        # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # run new image as task
        
